#+TITLE: NixOs Configuration

This is my repo for NixOs configuration.

* Important
To use this configuration you have make sure you are using your own NixOs image. That is because I use the unstable branch so the configuration options may or may not be available to you. If you want to use the stable branch and my configuration I will tell you which parts of config you have to remove.

* configuration.nix File
This is the main file that Nix wil read to configure you system.

** Configuring the Boot loader
By default NixOs will use the systemd-boot for uefi and grub for bios systems. I installed my system with lvm on luks encryption so I have added some extra options which you won't find on the default generated configuration.nix file during installation.
#+BEGIN_SRC nix
boot.loader = {
  systemd-boot.enable = true;
  systemd-boot.consoleMode = "max";
  efi.canTouchEfiVariables = true;
  systemd-boot.configurationLimit = 3;
  timeout = 2;
  systemd-boot.editor = false;
};

boot.blacklistedKernelModules = [ "iTCO_wdt" ];

boot.kernelPackages = pkgs.linuxPackages_latest;
boot.kernelModules = [ "kvm-intel" ];

boot.initrd.luks.devices = {
  lvmcrypt = {
    device = "/dev/disk/by-uuid/801e3f5c-af8a-4b0e-9594-458638d9b12a";
  };
};
#+END_SRC
It set's up the boot loader time-out to be 2s and disables the editor for systemd-boot as it can be security nightmare. We can also set the kernel version to use with our systems I preffer to use the latest one as I think I will give btrfs a shot.

The most difficult part for me was to get the part to set up my luks devices as I am not the brightest person to understand the docs in one go. Let me explain we will use the uuid of the disk/partition encrypted so if you encrypted /dev/sda2 you will use the uuid of /dev/sda2.

Rest of the configuration.nix file is mostly self explainatory.

* desktop.nix
This part configures the desktop for the user I use GNOME so if you don't like it go through Nix options available for desktops. You will find more or less all the desktops in NixOs even Pantheon.
** Important
Make sure you have desktop.nix in configuration.nix file imports section.
#+BEGIN_SRC nix
imports =
  [ # Include the results of the hardware scan.
    ./hardware-configuration.nix ./desktop.nix ./overlays.nix ./nvidia.nix
  ];
#+END_SRC

** Enabling GNOME & some Qol changes
This section of the configuration enables GNOME and installs some packages as well as excludes some that I don't use.
#+BEGIN_SRC nix
# Desktop Gnome3
services.xserver.desktopManager.gnome3.enable = true;
services.xserver.desktopManager.xterm.enable = false;
services.xserver.displayManager = {
  lightdm.enable = false;
  gdm.enable = true;
};

# Touchpad
services.xserver.libinput.enable = true;

# Some packages for desktop use
environment.systemPackages = with pkgs; [
  chromium
  firefox-beta-bin
  blender
  lollypop
  ffmpeg
  virt-manager
  gnomeExtensions.dash-to-panel
  gnome3.gnome-tweaks
];

#Excludepackages for gnome
environment.gnome3.excludePackages = with pkgs; [
  gnome3.gnome-music
  gnome3.gnome-contacts
  gnome3.gnome-maps
  gnome3.totem
  gnome3.yelp
  gnome3.epiphany
  gnome3.eog
  gnome-photos
];
#+END_SRC
Fonts don't seem important enough to have their own section so I will add it here. You might see a trend that how we install packages in NixOs you might even think you can add the fonts same way but there is a seperate module which installs it for you.
#+BEGIN_SRC nix
# Fonts to install
fonts.fonts = with pkgs; [
  corefonts
  noto-fonts-emoji
  liberation_ttf
  google-fonts
];
#+END_SRC
Make sure you have =nixpkgs.config.allowUnfree=true;= in configuration.nix or corefonts will fail to install or any proprieatary stuff.
** Users setup
We can also setup out user account in our configuration.
#+BEGIN_SRC nix
# Define a user account. Don't forget to set a password with ‘passwd’.
users.users.me = {
  isNormalUser = true;
  extraGroups = [ "wheel" "networkmanager" "libvirtd" ]; # Enable ‘sudo’ for the user.
  shell = pkgs.fish;
};
#+END_SRC
"me" is my username change it accordingly. You can also set your default shell if you want to use fish make sure you have =programs.fish.enable=true;= otherwise you will have issues with your login shell.Same applies if you use zsh.

* Virtualization(QEMU/libvirtd)
This section it seems I have some issues where stuff doesn't work out of the box at least for me there are some things you to make sure that are enabled.
- your user must be a member of the libvirtd group.
- you should have =programs.dconf.enable=true;= if you don't have dconf enabled you will get a message in virt-manager saying it can't fint the hypervisor.
- Install virt-manager or gnome-boxes whichever you like.
  #+BEGIN_SRC nix
# Virtualization
virtualisation.kvmgt.enable = true;
virtualisation.libvirtd = {
  enable = true;
  qemuOvmf = true;
  qemuRunAsRoot = false;
  onBoot = "ignore";
  onShutdown = "shutdown";
};

services.qemuGuest.enable = true;
  #+END_SRC
Now for the issue I had even after installing dconf virt-manager wasn't able to find the hypervisor so I had to run a command =virt-manager --connect qemu:///system= after which virt-manager was able to detect the hypervisor and dconf was able to store information after which I can launch the virt-manager and qemu is detected. More information [[github:NixOS/nixpkgs/issues/42433][here]].
* Nvidia
I use the imfamous nvidia-optimus card unfortunately my config needs to use the unstable version for this reason only. If you are team red no concerns you can use or borrow my config if you want and remember to remove =nvidia.nix= from my config.You can read nvidia.nix file if you want to setup your optimus systems people who don't have optimus chips you have to follow a different configuration [[google:https://nixos.wiki/wiki/Nvidia][here.]]
